using System;
using System.IO;
using System.Collections.Generic;
using System.Drawing;
using System.Linq;
using System.Security.Cryptography;
using System.Text;
using System.Web;
using Utitshala.Models;
using Utitshala.Controllers;

namespace Utitshala.Services
{
    /// <summary>
    /// Handles file I/O.
    /// </summary>
    public class FileSystemManager
    {
        public bool SaveFile(object file, AssignmentType type, string userId, int assignmentId)
        {
            // Check to see if a student folder exists with this ID
            string directory = AppDomain.CurrentDomain.BaseDirectory + @"StudentAssignments\" + userId;
            if (!Directory.Exists(directory))
            {
                Directory.CreateDirectory(directory);
            }
            switch (type)
            {
                case AssignmentType.Text:
                    // Cast to a string
                    string text = (string)file;
                    string fileNameText = GUIDGenerator() + ".txt";
                    // Save the file to the user's folder
                    try
                    {
                        // Save to the folder
                        string itextDirectory = directory + @"\" + fileNameText;
                        File.WriteAllText(itextDirectory, text);
                        // Create a database element recording the GUID and assignment
                        DatabaseController.SaveStudentAssignment(userId, fileNameText, text.Count(), assignmentId);
                    }
                    catch (Exception ex)
                    {
                        Console.WriteLine(ex.StackTrace);
                    }
                    break;
                case AssignmentType.Image:
                    // Cast to an image
                    Image image = (Image)file;
                    string fileNameImage = GUIDGenerator() + ".jpg";
                    // Save the file to the user's folder
                    try
                    {
                        // Save to the folder
                        string imageDirectory = directory + @"\" + fileNameImage;
                        image.Save(imageDirectory, System.Drawing.Imaging.ImageFormat.Jpeg);
                        // Get the file's length
                        long length = new FileInfo(imageDirectory).Length;
                        // Create a database element recording the GUID and assignment
                        DatabaseController.SaveStudentAssignment(userId, fileNameImage, Convert.ToInt32(length), assignmentId);
                    }
                    catch (Exception ex)
                    {
                        Console.WriteLine(ex.StackTrace);
                    }
                    break;
                case AssignmentType.Audio:
                    // Cast to a filestream
                    Stream audioStream = (Stream)file;
                    string fileNameAudio = GUIDGenerator() + ".ogg";
                    // Save the file to the user's folder
                    try
                    {
                        // Save to the folder
                        string imageDirectory = directory + @"\" + fileNameAudio;
                        var fileStream = new FileStream(imageDirectory, FileMode.Create, FileAccess.Write);
                        audioStream.CopyTo(fileStream);
                        audioStream.Dispose();
                        // Create a database element recording the GUID and assignment
                        DatabaseController.SaveStudentAssignment(userId, fileNameAudio, Convert.ToInt32(fileStream.Length), assignmentId);
                    }
                    catch (Exception ex)
                    {
                        Console.WriteLine(ex.StackTrace);
                    }
                    break;
            }
            return true;
        }

        /// <summary>
        /// Generates a unique GUID for unique file names.
        /// </summary>
        /// <param name="length">The string length of the GUID.</param>
        /// <returns>The GUID generated by this method.</returns>
        public string GUIDGenerator(int length = 16)
        {
            var SHA = SHA256.Create();
            byte[] toHash = SHA.ComputeHash(Encoding.UTF8.GetBytes(DateTime.Now.ToString()));
            string hash = BitConverter.ToString(toHash).Replace("-", String.Empty);
            hash = hash.Substring(0, length);
            return hash;
        }
    }
}